// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// integ
double integ(NumericMatrix dyn, double Tmax, int N);
RcppExport SEXP _pprmcmc_integ(SEXP dynSEXP, SEXP TmaxSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< double >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(integ(dyn, Tmax, N));
    return rcpp_result_gen;
END_RCPP
}
// distance
double distance(double phi1, double phi2, double lamda1, double lamda2);
RcppExport SEXP _pprmcmc_distance(SEXP phi1SEXP, SEXP phi2SEXP, SEXP lamda1SEXP, SEXP lamda2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< double >::type phi2(phi2SEXP);
    Rcpp::traits::input_parameter< double >::type lamda1(lamda1SEXP);
    Rcpp::traits::input_parameter< double >::type lamda2(lamda2SEXP);
    rcpp_result_gen = Rcpp::wrap(distance(phi1, phi2, lamda1, lamda2));
    return rcpp_result_gen;
END_RCPP
}
// Soursamp
int Soursamp(NumericVector rtime, NumericVector time, int ind, int siz, int ele);
RcppExport SEXP _pprmcmc_Soursamp(SEXP rtimeSEXP, SEXP timeSEXP, SEXP indSEXP, SEXP sizSEXP, SEXP eleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rtime(rtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< int >::type siz(sizSEXP);
    Rcpp::traits::input_parameter< int >::type ele(eleSEXP);
    rcpp_result_gen = Rcpp::wrap(Soursamp(rtime, time, ind, siz, ele));
    return rcpp_result_gen;
END_RCPP
}
// Which
int Which(SEXP rhs, double key);
RcppExport SEXP _pprmcmc_Which(SEXP rhsSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(Which(rhs, key));
    return rcpp_result_gen;
END_RCPP
}
// contains
bool contains(SEXP X, double z);
RcppExport SEXP _pprmcmc_contains(SEXP XSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(contains(X, z));
    return rcpp_result_gen;
END_RCPP
}
// construct
void construct(NumericMatrix Coo, NumericVector Inftime, double infper, int NR, int Tmax, IntegerVector& Indx, IntegerVector& size, NumericMatrix& M1, int& nrows);
RcppExport SEXP _pprmcmc_construct(SEXP CooSEXP, SEXP InftimeSEXP, SEXP infperSEXP, SEXP NRSEXP, SEXP TmaxSEXP, SEXP IndxSEXP, SEXP sizeSEXP, SEXP M1SEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Coo(CooSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Inftime(InftimeSEXP);
    Rcpp::traits::input_parameter< double >::type infper(infperSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< int >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type Indx(IndxSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< int& >::type nrows(nrowsSEXP);
    construct(Coo, Inftime, infper, NR, Tmax, Indx, size, M1, nrows);
    return R_NilValue;
END_RCPP
}
// construct1
void construct1(NumericMatrix Coo, NumericVector Inftime, NumericVector Remtime, int NR, int Tmax, IntegerVector& Indx, IntegerVector& size, NumericMatrix& M1, int& nrows);
RcppExport SEXP _pprmcmc_construct1(SEXP CooSEXP, SEXP InftimeSEXP, SEXP RemtimeSEXP, SEXP NRSEXP, SEXP TmaxSEXP, SEXP IndxSEXP, SEXP sizeSEXP, SEXP M1SEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Coo(CooSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Inftime(InftimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Remtime(RemtimeSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< int >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type Indx(IndxSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< int& >::type nrows(nrowsSEXP);
    construct1(Coo, Inftime, Remtime, NR, Tmax, Indx, size, M1, nrows);
    return R_NilValue;
END_RCPP
}
// likelihood
double likelihood(NumericMatrix Coo, IntegerVector Sou_siz, IntegerVector S, NumericMatrix dyn, double beta, double alpha, int nrows);
RcppExport SEXP _pprmcmc_likelihood(SEXP CooSEXP, SEXP Sou_sizSEXP, SEXP SSEXP, SEXP dynSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Coo(CooSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Sou_siz(Sou_sizSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(Coo, Sou_siz, S, dyn, beta, alpha, nrows));
    return rcpp_result_gen;
END_RCPP
}
// lik
double lik(double alpha, IntegerVector S, NumericMatrix mat);
RcppExport SEXP _pprmcmc_lik(SEXP alphaSEXP, SEXP SSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(lik(alpha, S, mat));
    return rcpp_result_gen;
END_RCPP
}
// raymcmc
NumericMatrix raymcmc(NumericMatrix Coo, IntegerVector Sourc, NumericVector Inftim, int nits, int lmin, int lmax, int Tmax, double a, double b, double c, double d, NumericVector theta);
RcppExport SEXP _pprmcmc_raymcmc(SEXP CooSEXP, SEXP SourcSEXP, SEXP InftimSEXP, SEXP nitsSEXP, SEXP lminSEXP, SEXP lmaxSEXP, SEXP TmaxSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Coo(CooSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Sourc(SourcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Inftim(InftimSEXP);
    Rcpp::traits::input_parameter< int >::type nits(nitsSEXP);
    Rcpp::traits::input_parameter< int >::type lmin(lminSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< int >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(raymcmc(Coo, Sourc, Inftim, nits, lmin, lmax, Tmax, a, b, c, d, theta));
    return rcpp_result_gen;
END_RCPP
}
// expmcmc
NumericMatrix expmcmc(NumericMatrix Coo, IntegerVector Sourc, NumericVector Inftim, int nits, int lmin, int lmax, int Tmax, double a, double b, double c, double d, NumericVector theta);
RcppExport SEXP _pprmcmc_expmcmc(SEXP CooSEXP, SEXP SourcSEXP, SEXP InftimSEXP, SEXP nitsSEXP, SEXP lminSEXP, SEXP lmaxSEXP, SEXP TmaxSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Coo(CooSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Sourc(SourcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Inftim(InftimSEXP);
    Rcpp::traits::input_parameter< int >::type nits(nitsSEXP);
    Rcpp::traits::input_parameter< int >::type lmin(lminSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< int >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(expmcmc(Coo, Sourc, Inftim, nits, lmin, lmax, Tmax, a, b, c, d, theta));
    return rcpp_result_gen;
END_RCPP
}
// caumcmc
NumericMatrix caumcmc(NumericMatrix Coo, IntegerVector Sourc, NumericVector Inftim, int nits, int lmin, int lmax, int Tmax, double a, double b, double c, double d, NumericVector theta);
RcppExport SEXP _pprmcmc_caumcmc(SEXP CooSEXP, SEXP SourcSEXP, SEXP InftimSEXP, SEXP nitsSEXP, SEXP lminSEXP, SEXP lmaxSEXP, SEXP TmaxSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Coo(CooSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Sourc(SourcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Inftim(InftimSEXP);
    Rcpp::traits::input_parameter< int >::type nits(nitsSEXP);
    Rcpp::traits::input_parameter< int >::type lmin(lminSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< int >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(caumcmc(Coo, Sourc, Inftim, nits, lmin, lmax, Tmax, a, b, c, d, theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pprmcmc_integ", (DL_FUNC) &_pprmcmc_integ, 3},
    {"_pprmcmc_distance", (DL_FUNC) &_pprmcmc_distance, 4},
    {"_pprmcmc_Soursamp", (DL_FUNC) &_pprmcmc_Soursamp, 5},
    {"_pprmcmc_Which", (DL_FUNC) &_pprmcmc_Which, 2},
    {"_pprmcmc_contains", (DL_FUNC) &_pprmcmc_contains, 2},
    {"_pprmcmc_construct", (DL_FUNC) &_pprmcmc_construct, 9},
    {"_pprmcmc_construct1", (DL_FUNC) &_pprmcmc_construct1, 9},
    {"_pprmcmc_likelihood", (DL_FUNC) &_pprmcmc_likelihood, 7},
    {"_pprmcmc_lik", (DL_FUNC) &_pprmcmc_lik, 3},
    {"_pprmcmc_raymcmc", (DL_FUNC) &_pprmcmc_raymcmc, 12},
    {"_pprmcmc_expmcmc", (DL_FUNC) &_pprmcmc_expmcmc, 12},
    {"_pprmcmc_caumcmc", (DL_FUNC) &_pprmcmc_caumcmc, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_pprmcmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
